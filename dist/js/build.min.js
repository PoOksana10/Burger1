document.addEventListener("DOMContentLoaded",(function(){new Prices("").setLocalStorage();const e=document.getElementById("basket"),t=new Element([{attributes:[{type:"button"},{value:"Orders"},{classNames:["basket"]}]},"input",""]).setMultipleAttribute();e.append(t);new IngredientsData("").menuElements.forEach((e=>{document.getElementById(e).addEventListener("click",(function(){document.getElementById("productImage").src=`../images/${e}.jpg`,document.querySelector(".productImage").classList.remove("hidden");new IngredientsData(e).updateListOfIngredients(e)}))}))})),document.addEventListener("click",(e=>{const t=e.target.closest(".confirm-order"),r=e.target.closest(".basket"),n=e.target.closest(".delProduct"),o=e.target.closest(".total-price-btn");if(t){new Prices(t).userOrdersStorage()}if(r){document.querySelector(".productImage").classList.add("hidden"),document.querySelector(".container1").classList.remove("hidden");new Prices(r).displayOrders()}if(n){const e=n.getAttribute("data-delProduct"),t=JSON.parse(localStorage.getItem("UserOrders")),r=t.find((t=>t[0]===e));t.splice(t.indexOf(r),1),localStorage.setItem("UserOrders",JSON.stringify(t)),document.querySelector(`li[data-line="${e}"]`).remove(),0==t.length&&(document.querySelector(".total-price-btn").remove(),document.getElementById("basketInfo").innerText="There is no orders yet!")}if(o){const e=new Message(o.value);document.querySelector(".total-price-btn").remove(),document.getElementById("basketInfo").innerHTML=e.getMessage(),setTimeout((()=>{window.location.reload(),localStorage.removeItem("BurgerCalories"),localStorage.removeItem("UserOrders")}),7e3)}})),document.addEventListener("change",(e=>{const t=e.target.closest(".itemQty");t.value.match(/^[1-9]/)||(t.value="1",alert("Minimum quantity is 1!"));new Prices(t).updateOrderPrice()}));
class Element{constructor(t){this.attributes=t[0].attributes,this.tagName=t[1]}setMultipleAttribute(){return this.element=document.createElement(this.tagName),this.attributes.forEach((t=>{for(let e in t)if("classNames"===e)for(let s of t[e])this.element.classList.add(s);else this.element.setAttribute(e,t[e])})),this.element}}
class Message{constructor(e){this.item=e,this.message="",this.coffeeMessage="The classic Colombian coffee personifies the typical taste of South American coffees. Thus, it has a mellow citrus acidity combined with a strong caramel sweetness. It is considered a medium-bodied coffee with hints of nutty undertones, fruity flavors, and notes of chocolate",this.dessertMessage="It's a rich, moist intensely chocolate flavoured cake. It's denseness and distinct chocolate flavour can make it seem more like a dessert than a cake. Many describe this treat as a pure chocolate sensation. Certainly the dense structure does concentrate the chocolate flavour.",this.burgerMessage="Juicy, big, loaded with toppings of my choice. High quality beef medium to well with cheese on a multigrain bun. A huge single burger with all the fixings as per below list!Want your choice to make - go ahead and adjust your burger how you like it!",this.colaMessage="Enjoy world wide loved soft drink, Coca Cola! Served with piece of lime in glass full of ice to make your thirst to go away!",this.friesMessage="Ideally your fries should have a crunchy exterior and a light, fluffy interior. When eating a serving of French fries, the last fry should always hold its form. Imagine eating a burger with a side of fries. Fries are either eaten first or last- so be sure to leave a lasting impression.",this.burgerSetMessage="Great deal for you! Order full set and get 10 percent discount. Tasty burger with crunchy fries and great taste of cooled Coca Cola will be a holiday for your stomach!",this.confirmationOrderMessage="Thank you for ordering with our restaurant! Please pay at the desk and collect order as per your number!    "}getMessage(){switch(this.item){case"Coffee":return this.message=this.coffeeMessage,this.message;case"Chocolate Cake":return this.message=this.dessertMessage,this.message;case"French Fries":return this.message=this.friesMessage,this.message;case"Burger Classic":return this.message=this.burgerMessage,this.message;case"Coca Cola":return this.message=this.colaMessage,this.message;case"Burger Set":return this.message=this.burgerSetMessage,this.message;default:return this.message=this.confirmationOrderMessage+"<p> Your number is # "+Math.floor(100*Math.random())+"</p><p>Total amount to pay : "+this.item.split(" ")[2]+" USD</p>",this.message}}}
class Burger{#e=["Bun","Meat"];constructor(){this.base_ingredients=this.#e,this.OnionCalories=7,this.SaladCalories=17,this.CheeseCalories=58,this.CabbageCalories=22,this.TomatoCalories=8,this.MeatCalories=250,this.BunCalories=150,this.MustardCalories=10,this.SauceBarbequeCalories=34,this.MayoCalories=94,this.KetchupCalories=17,this.ingredientsBurger=[{ingredient:"Onion",status:!0,cal:this.OnionCalories},{ingredient:"Salad",status:!0,cal:this.SaladCalories},{ingredient:"Cheese",status:!0,cal:this.CheeseCalories},{ingredient:"Cabbage",status:!0,cal:this.CabbageCalories},{ingredient:"Tomato",status:!0,cal:this.TomatoCalories},{ingredient:"Mayo",status:!0,cal:this.MayoCalories},{ingredient:"Ketchup",status:!0,cal:this.KetchupCalories},{ingredient:"Mustard",status:!0,cal:this.MustardCalories},{ingredient:"SauceBarbeque",status:!0,cal:this.SauceBarbequeCalories}]}}
class IngredientsData{#e=[{"French Fries":312},{"Coca Cola":139},{"Burger Set":963},{"Burger Classic":512},{"Chocolate Cake":360},{Coffee:95}];constructor(e){this.burgerClass=new Burger,this.element=e,this.ingredientsIds=[],this.parent=document.querySelector(".ingredients"),this.menuElements=["Burger Classic","French Fries","Coffee","Coca Cola","Chocolate Cake","Burger Set"],this.ingredients=[],this.title=document.querySelector(".product-title"),this.confirmBtn=document.querySelector(".confirm-order")}updateListOfIngredients(){for(let e=0;e<this.burgerClass.ingredientsBurger.length;e++)this.ingredients.push(Object.values(this.burgerClass.ingredientsBurger[e])[0]);this.showListOfIngredients()}showListOfIngredients(){localStorage.setItem("BurgerCalories",JSON.stringify(this.burgerClass.ingredientsBurger)),document.querySelector(".container1").classList.add("hidden"),this.parent.textContent="",this.title.innerText=this.element;let e=this.BunCalories+this.MeatCalories;this.burgerClass.ingredientsBurger.forEach((t=>{e+=t.cal})),this.confirmLine=document.createElement("li");const t=new Element([{attributes:[{"data-id":this.element},{classNames:["product-description"]}]},"li",""]);this.descriptionLine=t.setMultipleAttribute(),"Burger Classic"!==this.element&&this.#e.forEach((t=>{for(let i in t)i===this.element&&(e=t[i])}));const i=new Element([{attributes:[{"data-id":this.element},{type:"button"},{value:"Confirm Order - Total calories: "+e},{classNames:["confirm-order"]}]},"input",""]);this.confirmBtn=i.setMultipleAttribute(),this.messageInit=new Message(this.element),this.descriptionLine.innerText=this.messageInit.getMessage(),this.parent.append(this.descriptionLine),"Burger Classic"===this.element&&(document.querySelector(".product-title").innerText="Burger Classic",this.ingredients.forEach((e=>{this.childMain=document.createElement("li");for(let t=0;t<=4;t++)if(this.childSub=document.createElement("td"),this.childMain.append(this.childSub),0==t)this.childSub.innerText=e;else if(1==t){const t=new Element([{attributes:[{type:"button"},{value:"Add -"},{classNames:["plus-"+e,"add"]}]},"input",""]);this.plusBtn=t.setMultipleAttribute(),this.childSub.append(this.plusBtn)}else if(2===t){const t=new Element([{attributes:[{type:"button"},{value:"Remove -"},{classNames:["minus-"+e,"remove"]}]},"input",""]);this.minusBtn=t.setMultipleAttribute(),this.childSub.append(this.minusBtn)}else if(3==t){if(this.e=this.burgerClass.ingredientsBurger.find((t=>t.ingredient===e)),this.e){this.childSub.classList.add("status_img");const t=new Element([{attributes:[{alt:""},{src:"./images/ok.png"},{classNames:["status-img",e]}]},"img","status_img"]);this.img=t.setMultipleAttribute(),this.childSub.append(this.img)}}else 4==t&&(this.childSub.innerText=this.burgerClass.ingredientsBurger.find((t=>t.ingredient===e)).cal+"Cal",this.childSub.classList.add("cal"+e));this.parent.append(this.childMain)}))),this.confirmLine.append(this.confirmBtn),this.parent.append(this.confirmLine),this.customIngredientListener()}customIngredientListener(){this.ingredients.forEach((e=>{this.ingredientsIds.push("plus-"+e),this.ingredientsIds.push("minus-"+e)})),this.ingredientsIds.forEach((e=>{document.addEventListener("click",(t=>{this.target=t.target.closest(`.${e}`),this.target&&(this.ingredientId=e,this.updateIngredients())}))}))}updateIngredients(){if(this.ingredientId){const e=this.ingredientId.split("-")[0],t=this.ingredientId.split("-")[1];this.newUpdatedList=JSON.parse(localStorage.getItem("BurgerCalories")),this.selectedIngredient=this.newUpdatedList.find((e=>e.ingredient===t)),this.elementIndex=this.newUpdatedList.indexOf(this.selectedIngredient);const i=document.querySelector("."+("cal"+this.selectedIngredient.ingredient));"plus"===e?(this.newUpdatedList[this.elementIndex].status=!0,this.newUpdatedList[this.elementIndex].cal=this.burgerClass.ingredientsBurger.find((e=>e.ingredient===t)).cal,i.innerText=this.burgerClass.ingredientsBurger[this.elementIndex].cal+" Cal"):"minus"===e&&(this.newUpdatedList[this.elementIndex].status=!1,this.newUpdatedList[this.elementIndex].cal=0,i.innerText="0 Cal");let s=this.BunCalories+this.MeatCalories;this.newUpdatedList.forEach((e=>{s+=e.cal})),this.confirmBtn.value="Confirm Order - Total calories: "+s,this.updateStatusImg(),localStorage.setItem("BurgerCalories",JSON.stringify(this.newUpdatedList))}}updateStatusImg(){const e=document.querySelector(`.${this.selectedIngredient.ingredient}`);!0===this.newUpdatedList[this.elementIndex].status?e.src="./images/ok.png":e.src="./images/off.png"}}
class Prices{#e=[{"Burger Classic":6.87},{"Coca Cola":1.32},{Coffee:1.87},{"Chocolate Cake":3.36},{"Burger Set":9.65},{"French Fries":2.54}];constructor(e){this.data=new Burger,this.target=e,this.userOrders=JSON.parse(localStorage.getItem("UserOrders")),this.displayElement=document.getElementById("basketInfo")}setLocalStorage(){localStorage.getItem("UserOrders")||localStorage.setItem("UserOrders","[]")}userOrdersStorage(){const e=this.target.getAttribute("data-id");if(this.userOrders){if(this.userOrders.find((t=>t[0]===e)))alert("This item is already in your basket!");else{const t=1,r=this.priceColumnData("",[e,t],!1);this.userOrders.push([e,t,r,t*r]),localStorage.setItem("UserOrders",JSON.stringify(this.userOrders)),this.finalizeOrder()}}}finalizeOrder(){confirm("Item has been added to basket. Would you like to finalize order?")&&(document.querySelector(".productImage").classList.add("hidden"),document.querySelector(".container1").classList.remove("hidden"),this.displayOrders())}displayOrders(){this.displayElement.innerHTML="";for(let e of this.userOrders){const t=document.createElement("li");t.setAttribute("data-line",e[0]);for(let r=0;r<=3;r++){if(this.orderLineColumn=document.createElement("td"),0==r)if("Burger Classic"===e[0]){let t="";let r;JSON.parse(localStorage.getItem("BurgerCalories")).forEach((e=>{e.status&&(t+=e.ingredient+", ")})),0==t.length?(console.log(t.length),r=":plain"):r=", ",this.orderLineColumn.innerHTML=`${e[0]} : <p>( ${this.data.base_ingredients[0]+", "+this.data.base_ingredients[1]+r+t.slice(0,-2)} )</p>`}else this.orderLineColumn.innerText=e[0];else if(1==r){let t=1;this.userOrders.forEach((r=>{r[0]===e[0]&&(t=r[1])}));const r=new Element([{attributes:[{type:"number"},{value:t},{min:"1"},{"data-name":e[0]},{classNames:["itemQty"]}]},"input",""]).setMultipleAttribute();this.orderLineColumn.append(r)}else if(2==r)this.priceColumnData(this.orderLineColumn,e,!0);else if(3==r){const t=new Element([{attributes:[{alt:""},{"data-delProduct":e[0]},{src:"./images/delete.png"},{classNames:["delProduct"]}]},"img",""]).setMultipleAttribute();this.orderLineColumn.append(t)}t.append(this.orderLineColumn),this.displayElement.append(t)}}if(0==!this.userOrders.length){const e=document.createElement("li"),t=new Element([{attributes:[{type:"button"},{classNames:["total-price-btn"]}]},"input",""]);this.buyBtn=t.setMultipleAttribute(),this.setBtnValue(!0),e.append(this.buyBtn),this.displayElement.append(e)}else document.getElementById("basketInfo").innerText="There is no orders yet!"}setBtnValue(e){e||(this.buyBtn=document.querySelector(".total-price-btn"));let t=0;this.userOrders.forEach((e=>{t+=e[3]})),this.buyBtn.value="Confirm Orders "+t.toFixed(2)+" USD"}priceColumnData(e,t,r){let s;return this.#e.forEach((i=>{for(let a in i)a===t[0]&&(r?(e.innerText=(t[1]*i[a]).toFixed(2)+" USD",e.setAttribute("class","itemPrice"),e.setAttribute("data-name",t[0])):s=i[a])})),s}updateOrderPrice(){const e=document.querySelector(`.itemPrice[data-name="${this.target.getAttribute("data-name")}"]`),t=e.getAttribute("data-name");this.priceColumnData(e,[t,this.target.value],!0);const r=this.userOrders.find((e=>e[0]===t));r[1]=parseInt(this.target.value),r[3]=r[2]*this.target.value;const s=this.userOrders.indexOf(r);this.userOrders[s]=r,localStorage.setItem("UserOrders",JSON.stringify(this.userOrders)),this.setBtnValue(!1)}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
